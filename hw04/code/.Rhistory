#       for ranking the students in the class
# Author: Pinshuo Ye
# Date: 11-08-2017
# =================================================================
a <- c(1, 4, 7, NA, 10)
b <- c(1, 4, NA, 7, 10)
c <- c(1, NA, 4, 7, NA)
d <- c(NA, 4, NA, 7, 10)
x <- c(1, 4, 7, 10)
y <- c(18, 15, 16, 4, 17, 9)
z <- c(0, 100, 200, 300)
w <- c(-1, 2, 2, 2, 4)
library(stringr)
library(testthat)
context("Vector Operations")
test_that("The missing value is removed", {
expect_equal(remove_missing(a), c(1, 4, 7, 10))
expect_equal(remove_missing(b), c(1, 4, 7, 10))
expect_equal(remove_missing(c), c(1, 4, 7))
expect_equal(remove_missing(d), c(4, 7, 10))
})
test_that("get_min is getting vector`s minimum value", {
expect_equal(get_minimum(a, na.rm = TRUE), 1)
expect_equal(get_minimum("a"), "non-numeric argument")
expect_equal(get_minimum(c, na.rm = TRUE), 1)
expect_equal(get_minimum(d, na.rm = TRUE), 4)
})
test_that("get_max is getting vector`s maximum value", {
expect_equal(get_maximum(a, na.rm = TRUE), 10)
expect_equal(get_maximum("a"), "non-numeric argument")
expect_equal(get_maximum(c, na.rm = TRUE), 7)
expect_equal(get_maximum(d, na.rm = TRUE), 10)
})
test_that("get_range is getting vector`s range", {
expect_equal(get_range(a, na.rm = TRUE), 9)
expect_equal(get_range("a"), "non-numeric argument")
expect_equal(get_range(c, na.rm = TRUE), 6)
expect_equal(get_range(d, na.rm = TRUE), 6)
})
test_that("get_percentile10 is getting vector`s 10th percentile", {
expect_equal(get_percentile10(a, na.rm = TRUE), 1.9)
expect_equal(get_percentile10("a"), "non-numeric argument")
expect_equal(get_percentile10(c, na.rm = TRUE), 1.6)
expect_equal(get_percentile10(d, na.rm = TRUE), 4.6)
})
test_that("get_percentile90 is getting vector`s 90th percentile", {
expect_equal(get_percentile90(a, na.rm = TRUE), 9.1)
expect_equal(get_percentile90("a"), "non-numeric argument")
expect_equal(get_percentile90(c, na.rm = TRUE), 6.4)
expect_equal(get_percentile90(d, na.rm = TRUE), 9.4)
})
test_that("get_median is getting vector`s median", {
expect_equal(get_median(a, na.rm = TRUE), 5.5)
expect_equal(get_median("a"), "non-numeric argument")
expect_equal(get_median(c, na.rm = TRUE), 4)
expect_equal(get_median(d, na.rm = TRUE), 7)
})
test_that("get_median is getting vector`s median", {
expect_equal(get_median(a, na.rm = TRUE), 5.5)
expect_equal(get_median("a"), "non-numeric argument")
expect_equal(get_median(c, na.rm = TRUE), 4)
expect_equal(get_median(d, na.rm = TRUE), 7)
})
test_that("get_average is getting vector`s average", {
expect_equal(get_average(a, na.rm = TRUE), 5.5)
expect_equal(get_average("a"), "non-numeric argument")
expect_equal(get_average(b, na.rm = TRUE), 5.5)
expect_equal(get_average(d, na.rm = TRUE), 7)
})
test_that("get_stdev is getting vector`s std", {
expect_equal(get_stdev(a, na.rm = TRUE), sd(a, na.rm = TRUE))
expect_equal(get_stdev("a"), "non-numeric argument")
expect_equal(get_stdev(b, na.rm = TRUE), sd(b, na.rm = TRUE))
expect_equal(get_stdev(d, na.rm = TRUE), sd(d, na.rm = TRUE))
})
test_that("get_stdev is getting vector`s std", {
expect_equal(get_stdev(a, na.rm = TRUE), sd(a, na.rm = TRUE))
expect_equal(get_stdev("a"), "non-numeric argument")
expect_equal(get_stdev(b, na.rm = TRUE), sd(b, na.rm = TRUE))
expect_equal(get_stdev(d, na.rm = TRUE), sd(d, na.rm = TRUE))
})
test_that("get_quantile1 is getting vector`s first quantlile", {
expect_equal(get_quantile1(a, na.rm = TRUE), 3.25)
expect_equal(get_quantile1("a"), "non-numeric argument")
expect_equal(get_quantile1(b, na.rm = TRUE), 3.25)
expect_equal(get_quantile1(d, na.rm = TRUE), 5.5)
})
test_that("get_quantile3 is getting vector`s third quantlile", {
expect_equal(get_quantile3(a, na.rm = TRUE), 7.75)
expect_equal(get_quantile3("a"), "non-numeric argument")
expect_equal(get_quantile3(b, na.rm = TRUE), 7.75)
expect_equal(get_quantile3(d, na.rm = TRUE), 8.5)
})
test_that("countmissing is getting vector`s number of missing value", {
expect_equal(count_missing(a), 1)
expect_equal(count_missing(b), 1)
expect_equal(count_missing(c), 2)
expect_equal(count_missing(d), 2)
})
test_that("summary_stats is getting vector`s basic summary", {
expect_equal(length(summary_stats(a)), 11)
expect_equal(as.numeric(summary_stats(a))[1], 1)
expect_equal(as.numeric(summary_stats(a))[2], as.numeric(quantile(a, 0.1, na.rm = TRUE)))
expect_equal(as.numeric(summary_stats(a))[11], as.numeric(summary(a)[7]))
})
test_that("rescale is getting vector`s scaled numbers", {
expect_equal(rescale100(w, xmin = 2, xmax = 12), c(-30, 0, 0, 0, 20))
expect_equal(rescale100(x, xmin = 0, xmax = 50), c(2, 8, 14, 20))
expect_equal(rescale100(y, xmin = 0, xmax = 20), c(90, 75, 80, 20, 85, 45))
expect_equal(rescale100(z, xmin = 0, xmax = 200), c(0, 50, 100, 150))
})
test_that("drop_lowest is getting vector`s lowest number", {
expect_equal(drop_lowest(x), c(4, 7, 10))
expect_equal(drop_lowest(y), c(18, 15, 16, 17, 9))
expect_equal(drop_lowest(z), c(100, 200, 300))
expect_equal(drop_lowest("a"), "non-numeric argument")
})
test_that("score_homework is getting vector`s homework score", {
expect_equal(score_homework(x, drop = TRUE), 7)
expect_equal(score_homework(x, drop = FALSE), 5.5)
expect_equal(score_homework(z, drop = TRUE), 200)
expect_equal(score_homework(w, drop = TRUE), 2.5)
})
test_that("score_quiz is getting vector`s quiz score", {
expect_equal(score_quiz(x, drop = TRUE), 7)
expect_equal(score_quiz(x, drop = FALSE), 5.5)
expect_equal(score_quiz(z, drop = TRUE), 200)
expect_equal(score_quiz(w, drop = TRUE), 2.5)
})
test_that("score_lab is getting vector`s lab score", {
expect_equal(score_lab(79), "invalid input")
expect_equal(score_lab(12), 100)
expect_equal(score_lab(9), 60)
expect_equal(score_lab(3), 0)
})
# ===============================================================
# Title: HW04, Stat 133, Fall 2017, testing functions
# Description:
#       This is a lab work for stat 133, HW04.
#       The main task of this r script file is to create functions
#       for ranking the students in the class
# Author: Pinshuo Ye
# Date: 11-08-2017
# ===============================================================
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
# ===============================================================
# Title: HW04, Stat 133, Fall 2017, testing functions
# Description:
#       This is a lab work for stat 133, HW04.
#       The main task of this r script file is to create functions
#       for ranking the students in the class
# Author: Pinshuo Ye
# Date: 11-08-2017
# ===============================================================
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
dat1 <- select(data, 1:9)
Homework <- rep(0, 334)
Homework <- for(i in 1:334){
Homework[i] <- score_homework(dat[i, 1:9], drop = TRUE)
}
library(dplyr)
dat1 <- select(data, 1:9)
dat1 <- select(data, HW1, HW2)
Homework <- rep(0, 334)
Homework <- rep(0, 334)
Homework <- for(i in 1:334){
v <- as.vector(dat[i, 1:9])
Homework[i] <- score_homework(v, drop = TRUE)
}
Homework <- rep(0, 334)
drop_lowest <- function(x){
if(is.numeric(x)){
for(i in 1:length(x)){
if(x[i] == get_minimum(x)){
x[i] <- NA
break
}
}
remove_missing(x)
}
else{
print("non-numeric argument")
}
}
# example of drop_lowest()
b <- c(10, 10, 8.5, 4, 7, 9)
drop_lowest(b)
drop_lowest(b)
b <- drop_lowest(b)
dat[ , 1:9]
dat[ , 1:9]
9
2+2
3+3
Homework <- rep(0, 334)
Homework <- for(i in 1:334){
v <- as.vector(dat[i, 1:9])
Homework[i] <- score_homework(v, drop = TRUE)
}
View(v)
dat <- data.frame(dat, Homework)
score_homework(v, drop = TRUE)
Homework <- rep(0, 334)
Homework <- for(i in 1:334){
v <- as.numeric(dat[i, 1:9])
Homework[i] <- score_homework(v, drop = TRUE)
}
score_homework(v, drop = TRUE)
Homework <- rep(0, 334)
Homework <- for(i in 1:334){
v <- as.numeric(dat[i, 1:9])
Homework[i] <- score_homework(v, drop = TRUE)
}
v <- as.numeric(dat[1, 1:9])
score_homework(v, drop = TRUE)
for(i in 1:334){
v <- as.numeric(dat[i, 1:9])
Homework[i] <- score_homework(v, drop = TRUE)
}
dat <- data.frame(dat, Homework)
Quiz <- rep(0, 334)
for(i in 1:334){
v <- as.numeric(dat[i, 11:14])
Quiz[i] <- score_homework(v, drop = TRUE)
}
dat <- data.frame(dat, Quiz)
Quiz <- rep(0, 334)
for(i in 1:334){
v <- as.numeric(dat[i, 11:14])
Quiz[i] <- score_quiz(v, drop = TRUE)
}
dat <- data.frame(dat, Quiz)
library(readr)
dat <- data.frame(
read_csv(
"..\\data\\rawdata\\rawscores.csv"
))
# Replacing all the na`s into 0
for(i in 1:16){
for(j in 1:334){
if(is.na(dat[j, i])){
dat[j, i] <- 0
}
}
}
#rescaling quiz
dat$QZ1 <- rescale100(dat$QZ1, xmin = 0, xmax = 12)
dat$QZ2 <- rescale100(dat$QZ2, xmin = 0, xmax = 18)
dat$QZ3 <- rescale100(dat$QZ3, xmin = 0, xmax = 20)
dat$QZ4 <- rescale100(dat$QZ4, xmin = 0, xmax = 20)
#rescaling test
Test1 <- rescale100(dat$EX1, xmin = 0, xmax = 80)
Test2 <- rescale100(dat$EX2, xmin = 0, xmax = 90)
dat <- data.frame(dat, Test1, Test2)
#creating homework
library(dplyr)
Homework <- rep(0, 334)
for(i in 1:334){
v <- as.numeric(dat[i, 1:9])
Homework[i] <- score_homework(v, drop = TRUE)
}
dat <- data.frame(dat, Homework)
Quiz <- rep(0, 334)
for(i in 1:334){
v <- as.numeric(dat[i, 11:14])
Quiz[i] <- score_quiz(v, drop = TRUE)
}
dat <- data.frame(dat, Quiz)
Lab <- rep(0, 334)
for(i in 1:334){
v <- dat[i, "ATT"]
Lab[i] <- score_lab(v)
}
dat <- data.frame(dat, Lab)
Overall <- rep(0, 334)
for(i in 1:334){
Overall[i] <- 0.1 * dat[i, "Lab"]
}
Overall <- rep(0, 334)
for(i in 1:334){
Overall[i] <- 0.1 * dat[i, "Lab"] + 0.3 * dat[i, "Homework"] + 0.15* dat[i, "Quiz"] +
0.2 * dat[i, "Test1"] + 0.25 * dat[i, "Test2"]
}
dat <- data.frame(dat, Overall)
Grade <- rep("a", 334)
Grade <- rep("A", 334)
Grade <- rep("A", 334)
for(i in 1:334){
if(dat$Overall[i] >= 0 & dat$Overall[i] < 50){
Grade[i] <- "F"
}
}
Grade <- rep("A", 334)
for(i in 1:334){
if(dat$Overall[i] >= 0 & dat$Overall[i] < 50){
Grade[i] <- "F"
}else if(dat$Overall[i] >= 50 & dat$Overall[i] < 60){
Grade[i] <- "D"
}else if(dat$Overall[i] >= 60 & dat$Overall[i] < 70){
Grade[i] <- "C-"
}else if(dat$Overall[i] >= 70 & dat$Overall[i] < 77.5){
Grade[i] <- "C"
}
}
Grade <- rep("A", 334)
for(i in 1:334){
if(dat$Overall[i] >= 0 & dat$Overall[i] < 50){
Grade[i] <- "F"
}else if(dat$Overall[i] >= 50 & dat$Overall[i] < 60){
Grade[i] <- "D"
}else if(dat$Overall[i] >= 60 & dat$Overall[i] < 70){
Grade[i] <- "C-"
}else if(dat$Overall[i] >= 70 & dat$Overall[i] < 77.5){
Grade[i] <- "C"
}else if(dat$Overall[i] >= 77.5 & dat$Overall[i] < 79.5){
Grade[i] <- "C+"
}else if(dat$Overall[i] >= 79.5 & dat$Overall[i] < 82){
Grade[i] <- "B-"
}else if(dat$Overall[i] >= 82 & dat$Overall[i] < 86){
Grade[i] <- "B"
}else if(dat$Overall[i] >= 86 & dat$Overall[i] < 88){
Grade[i] <- "B+"
}else if(dat$Overall[i] >= 88 & dat$Overall[i] < 90){
Grade[i] <- "A-"
}else if(dat$Overall[i] >= 90 & dat$Overall[i] < 95){
Grade[i] <- "A"
}else if(dat$Overall[i] >= 95 & dat$Overall[i] < 100){
Grade[i] <- "A+"
}
}
Grade <- rep("A", 334)
for(i in 1:334){
if(dat$Overall[i] >= 0 & dat$Overall[i] < 50){
Grade[i] <- "F"
}else if(dat$Overall[i] >= 50 & dat$Overall[i] < 60){
Grade[i] <- "D"
}else if(dat$Overall[i] >= 60 & dat$Overall[i] < 70){
Grade[i] <- "C-"
}else if(dat$Overall[i] >= 70 & dat$Overall[i] < 77.5){
Grade[i] <- "C"
}else if(dat$Overall[i] >= 77.5 & dat$Overall[i] < 79.5){
Grade[i] <- "C+"
}else if(dat$Overall[i] >= 79.5 & dat$Overall[i] < 82){
Grade[i] <- "B-"
}else if(dat$Overall[i] >= 82 & dat$Overall[i] < 86){
Grade[i] <- "B"
}else if(dat$Overall[i] >= 86 & dat$Overall[i] < 88){
Grade[i] <- "B+"
}else if(dat$Overall[i] >= 88 & dat$Overall[i] < 90){
Grade[i] <- "A-"
}else if(dat$Overall[i] >= 90 & dat$Overall[i] < 95){
Grade[i] <- "A"
}else if(dat$Overall[i] >= 95 & dat$Overall[i] <= 100){
Grade[i] <- "A+"
}
}
dat <- data.frame(dat, Grade)
sink('../output/Lab-stats.txt')
summary_stats(Lab)
print_stats(summary_stats(Lab))
sink()
sink('../output/Homework-stats.txt')
summary_stats(Homework)
print_stats(summary_stats(Homework))
sink()
sink('../output/Lab-stats.txt')
summary_stats(Lab)
print_stats(summary_stats(Lab))
sink()
sink('../output/Homework-stats.txt')
summary_stats(Homework)
print_stats(summary_stats(Homework))
sink()
sink('../output/ Quiz-stats.txt')
summary_stats(Quiz)
print_stats(summary_stats(Quiz))
sink()
sink('../output/Test1-stats.txt')
summary_stats(Test1)
print_stats(summary_stats(Test1))
sink()
sink('../output/Test2-stats.txt')
summary_stats(Test2)
print_stats(summary_stats(Test2))
sink()
sink('../output/Overall-stats.txt')
summary_stats(Overall)
print_stats(summary_stats(Overall))
sink()
sink('../output/Quiz-stats.txt')
summary_stats(Quiz)
print_stats(summary_stats(Quiz))
sink()
sink('../output/Quiz-stats.txt')
summary_stats(Quiz)
print_stats(summary_stats(Quiz))
sink()
#sink the clean data
sink('../output/summary-cleanscores.txt')
str(dat)
sink()
write.csv(dat, file = "../data/cleandata/cleanscores.csv")
shiny::runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
library(ggvis)
install.packages(ggvis)
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('E:/Stat 133/lab09-Pinshuo-Ye/app3.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
View(dat)
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
ggplot(dat)+
geom_bar(aes(x = Grade))
ggplot(dat)+
geom_bar(aes(x = Grade), col = "blue")+
3
ggplot(dat)+
geom_bar(aes(x = Grade), col = "blue")+
geom_label(y = "frequency")
ggplot(dat)+
geom_bar(aes(x = Grade), col = "blue")+
ylab("frequency")
ggplot(dat)+
geom_bar(aes(x = Grade), fill = "blue")+
ylab("frequency")
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
install.packages("ggvis")
shinyApp(ui = ui, server = server)
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('E:/Stat 133/test.R')
runApp('E:/Stat 133/test.R')
runApp('E:/Stat 133/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('E:/Stat 133/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('E:/Stat 133/lab09-Pinshuo-Ye/app3.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
table(dat$Grade)
table(dat$Grade)[1]
dat1 <- data.frame(
c("A", "A-", "A+", "B", "B-", "B+", "C", "C-", "C+", "D", "F"),
c(54, 31, 16, 52, 29, 30, 38, 27, 23, 19, 15)
)
View(dat1)
Grade <- c("A", "A-", "A+", "B", "B-", "B+", "C", "C-", "C+", "D", "F")
Freq <- c(54, 31, 16, 52, 29, 30, 38, 27, 23, 19, 15)
Prop <- rep(0, 11)
for(i in 1:11){
Prop[i] <- Freq[i]/sum(Freq)
}
dat1 <- data.frame(
Grade,
Freq,
Prop
)
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/test.R')
runApp('C:/Users/pinshuo/Downloads/gradevis.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/gradevis.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/gradevis.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/gradevis.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app/test.R')
runApp('C:/Users/pinshuo/stat133/stat133-hws-fall17/hw04/app/test.R')
